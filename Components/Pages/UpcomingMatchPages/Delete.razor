@page "/upcomingmatches/delete"
@using Microsoft.EntityFrameworkCore
@using R6Ranking.Models
@inject IDbContextFactory<R6Ranking.Data.R6EsportsDbContext> DbFactory
@inject NavigationManager NavigationManager

<PageTitle>Delete</PageTitle>

<h1>Delete</h1>

<p>Are you sure you want to delete this?</p>
<div>
    <h2>UpcomingMatch</h2>
    <hr />
    @if (upcomingmatch is null)
    {
        <p><em>Loading...</em></p>
    }
    else {
        <dl class="row">
            <dt class="col-sm-2">MatchName</dt>
            <dd class="col-sm-10">@upcomingmatch.MatchName</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">VODURL</dt>
            <dd class="col-sm-10">@upcomingmatch.VODURL</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">Team1ID</dt>
            <dd class="col-sm-10">@upcomingmatch.Team1ID</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">Team2ID</dt>
            <dd class="col-sm-10">@upcomingmatch.Team2ID</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">MatchDate</dt>
            <dd class="col-sm-10">@upcomingmatch.MatchDate</dd>
        </dl>
        <EditForm method="post" Model="upcomingmatch" OnValidSubmit="DeleteUpcomingMatch" FormName="delete" Enhance>
            <button type="submit" class="btn btn-danger" disabled="@(upcomingmatch is null)">Delete</button> |
            <a href="/upcomingmatches">Back to List</a>
        </EditForm>
    }
</div>

@code {
    private UpcomingMatch? upcomingmatch;

    [SupplyParameterFromQuery]
    private int FutureMatchID { get; set; }

    protected override async Task OnInitializedAsync()
    {
        using var context = DbFactory.CreateDbContext();
        upcomingmatch = await context.UpcomingMatches.FirstOrDefaultAsync(m => m.FutureMatchID == FutureMatchID);

        if (upcomingmatch is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }

    private async Task DeleteUpcomingMatch()
    {
        using var context = DbFactory.CreateDbContext();
        context.UpcomingMatches.Remove(upcomingmatch!);
        await context.SaveChangesAsync();
        NavigationManager.NavigateTo("/upcomingmatches");
    }
}
