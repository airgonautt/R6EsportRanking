@page "/"

@using R6Ranking.Models
@using Microsoft.EntityFrameworkCore
@using R6Ranking.Data
@using R6Ranking.Components.Splashable
@inject IDbContextFactory<R6Ranking.Data.R6EsportsDbContext> DbFactory
@inject NavigationManager NavManager
@rendermode InteractiveServer


<div class="container">

    <div class="grid">

        <!-- Team Metrics -->
        <div class="grid-item b6x1" style="text-align: center; padding: 5px;">
            <Card style="padding: 5px;">
                <CardHeader style="padding: 5px 10px;">
                    <h3 class="mb-1" style="color: var(--bs-white--1); font-size: 1.2rem;">Team Metrics</h3>
                </CardHeader>
                <CardBody class="text-center" style="padding: 5px;">
                    <img src="Images/Teams/teamGraphs2023.png"
                    alt="Team Metrics Graph"
                    class="img-fluid rounded mb-2" style="object-fit: contain; max-height: 250px;" />
                </CardBody>
                <CardFooter style="padding: 5px 10px;">
                    <p style="color: var(--bs-white--1); font-size: 0.9rem; margin-bottom: 5px;">Study and compare team statistics.</p>
                    <a class="btn btn-outline-secondary btn-sm"
                    style="color: var(--bs-white--1); font-size: 0.85rem;"
                    href="/teams/compare">Learn More</a>
                </CardFooter>
            </Card>
        </div>

        <!-- Player Draft -->
        <div class="grid-item b6x1" style="text-align: center; padding: 5px;">
            <Card style="padding: 5px;">
                <CardHeader style="padding: 5px 10px;">
                    <h3 class="mb-1" style="color: var(--bs-white--1); font-size: 1.2rem;">Player Draft</h3>
                </CardHeader>
                <CardBody class="text-center" style="padding: 5px;">
                    <img src="Images/Players/players.png"
                    alt="Player Draft Image"
                    class="img-fluid rounded mb-2" style="object-fit: contain; max-height: 250px;" />
                </CardBody>
                <CardFooter style="padding: 5px 10px;">
                    <p style="color: var(--bs-white--1); font-size: 0.9rem; margin-bottom: 5px;">Collect, track, and upgrade player cards.</p>
                    <a class="btn btn-outline-secondary btn-sm"
                    style="color: var(--bs-white--1); font-size: 0.85rem;"
                    href="/players/draft">Try it now</a>
                </CardFooter>
            </Card>
        </div>

        <!-- Leaderboard -->
        <div class="grid-item b6x6" style="text-align: center; padding: 5px;">
            <Card style="padding: 5px;">
                <CardHeader style="padding: 5px 10px;">
                    <h4 class="mb-1" style="color: var(--bs-white--1); font-size: 1.5rem;">Leaderboard</h4>
                </CardHeader>
                <CardBody class="text-center" style="padding: 5px;">
                    <table class="table table-hover custom-leaderboard-table" style="margin-bottom: 5px; width: 100%;">
                        <tbody>
                            @foreach (var team in Teams)
                            {
                                <tr @onclick="() => NavigateToTeam(team)" style="cursor: pointer; color: var(--bs-white--1);">
                                    <td style="padding: 10px;">
                                        <div class="d-flex align-items-center justify-content-between">
                                            <!-- Rank -->
                                            <span class="me-3" style="font-size: 1.2rem; font-weight: bold;">@(@Teams.IndexOf(team) + 1)</span>
                                            <!-- Team Logo -->
                                            <img src="@team.LogoUrl" alt="@team.TeamName Logo"
                                            class="team-logo me-3 rounded" style="height: 40px; width: 40px;" />
                                            <!-- Team Name -->
                                            <span class="me-auto" style="font-size: 1.2rem; font-weight: 500;">@team.TeamName</span>
                                            <!-- Current Elo -->
                                            <span style="font-size: 1.2rem; font-weight: 400; margin-left: 20px;">@($"{team.CurrentElo} RP")</span>
                                        </div>
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </CardBody>
                <CardFooter style="padding: 5px 10px;">
                    <p class="mb-0" style="font-size: 0.9rem; color: var(--bs-white--1);">Last Updated: @DateTime.Now.Day</p>
                </CardFooter>
            </Card>
        </div>

        <!-- Future Matches -->
        <div class="grid-item b6x6" style="text-align: center; padding: 5px;">
        <Card style="padding: 5px;">
            <CardHeader style="padding: 5px 10px;">
                <h4 class="mb-1" style="color: var(--bs-white--1); font-size: 1.5rem;">Upcoming Matches</h4>
            </CardHeader>
            <CardBody class="text-center" style="padding: 5px;">
                <table class="table table-hover custom-leaderboard-table" style="margin-bottom: 5px; width: 100%;">
                    <tbody>
                        @foreach (var match in FutureMatches)
                        {


                            <tr style="cursor: pointer;">
                                <td style="padding: 10px;">
                                    <div class="d-flex align-items-center justify-content-between">
                                        <!-- Date & Time -->
                                        <div class="d-flex flex-column align-items-center">
                                            <span style="font-size: 0.8rem; color: var(--bs-white--2);">
                                                @match.MatchDate.ToString("MMM d, yyyy")
                                            </span>
                                            <span class="fw-bold fst-italic" style="font-size: 1.2rem; color: var(--bs-white--1);">
                                                @match.MatchDate.ToString("HH:mm")
                                            </span>
                                        </div>

                                        <!-- Team 1 -->
                                            <div class="d-flex flex-column align-items-center" @onclick="() => NavigateToTeam(match.Team1)">
                                            <span style="font-size: 0.9rem; color: var(--bs-white--1);">
                                                @(match.Team1?.TeamName ?? "Unknown")
                                            </span>
                                            <img src="@(match.Team1?.LogoUrl ?? "default-logo.png")" alt="Team 1 Logo"
                                                 class="rounded" style="height: 40px; width: 40px; object-fit: contain;" />
                                        </div>

                                        <!-- VS -->
                                        <span class="fw-bold" style="font-size: 1.5rem; color: var(--bs-white--1);">VS</span>

                                        <!-- Team 2 -->
                                            <div class="d-flex flex-column align-items-center" @onclick="() => NavigateToTeam(match.Team2)">
                                            <span style="font-size: 0.9rem; color: var(--bs-white--1);">
                                                @(match.Team2?.TeamName ?? "Unknown")
                                            </span>
                                            <img src="@(match.Team2?.LogoUrl ?? "default-logo.png")" alt="Team 2 Logo"
                                                 class="rounded" style="height: 40px; width: 40px; object-fit: contain;" />
                                        </div>
                                    </div>
                                </td>
                            </tr>
                        }

                    </tbody>
                </table>
            </CardBody>
        </Card>
        </div>

        <!-- Ubisoft Newsletter -->
        <div class="grid-item b6x2" style="position: relative; text-align: center; padding: 10px; display: flex;
                flex-direction: column; align-items: center; height: 300px; width: 100%;">
            <ArticleDisplay />
        </div>

        <!-- About -->
        <div class="grid-item b3x2">
            <h2>About Elo Engine</h2>
            <p>elo article</p>
        </div>
        <!-- Region Performance -->
        <div class="grid-item b3x2">
            <h2>Region Performance</h2>
            <p>region graphs</p>
        </div>
        <!-- Match Replay -->
        <div class="grid-item b6x2">
            <p>Match Replay</p>
        </div>
    </div>
</div>

@code {
    [Inject] private NavigationManager NavigationManager { get; set; } = default!;
    private List<Team> Teams = new List<Team>();
    private List<Match> Matches = new List<Match>();
    private Dictionary<int, string> TeamLogoCache = new();
    private List<UpcomingMatch> FutureMatches = new List<UpcomingMatch>();

    protected override async Task OnInitializedAsync()
    {
        using var context = await DbFactory.CreateDbContextAsync();

        Teams = await context.Teams
            .Where(t => t.IsActive)
            .OrderByDescending(t => t.CurrentElo)
            .Take(12)
            .ToListAsync();

        Matches = await context.Matches
            .OrderByDescending(m => m.MatchDate)
            .Take(8)
            .ToListAsync();

        FutureMatches = await context.UpcomingMatches
            .OrderBy(m => m.MatchDate)
            .Include(t => t.Team1)
            .Include(t => t.Team2)
            .Take(8)
            .ToListAsync();

    }

    private void NavigateToTeam(Team team)
    {
        var teamName = team.TeamName;
        NavigationManager.NavigateTo($"/teams/{teamName}");
    }
    private void NavigateToMatch(Match match)
    {
        NavigationManager.NavigateTo($"/matches/details?matchid={match.MatchID}");
    }

    private async Task<string> ToTeamLogo(int teamID)
    {
        // Check cache first
        if (TeamLogoCache.TryGetValue(teamID, out var logoUrl))
        {
            return logoUrl;
        }

        // Fetch from database
        using var context = await DbFactory.CreateDbContextAsync();
        var team = await context.Teams.FirstOrDefaultAsync(t => t.TeamID == teamID);

        // Cache the result
        logoUrl = team?.LogoUrl ?? "Images/Logos/default-logo.png";
        TeamLogoCache[teamID] = logoUrl;

        return logoUrl;
    }
    private string GetTeamLogo(int teamID)
    {
        if (!TeamLogoCache.ContainsKey(teamID))
        {
            _ = FetchAndCacheLogo(teamID);
            return "defaultlogo.png";
        }

        return TeamLogoCache[teamID];
    }
    private async Task FetchAndCacheLogo(int teamID)
    {
        var logoUrl = await ToTeamLogo(teamID);
        await InvokeAsync(StateHasChanged);
    }

}

