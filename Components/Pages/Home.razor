@page "/"

@using R6Ranking.Models
@using Microsoft.EntityFrameworkCore
@using R6Ranking.Data
@using R6Ranking.Components.Splashable
@inject IDbContextFactory<R6Ranking.Data.R6EsportsDbContext> DbFactory
@inject NavigationManager NavManager
@rendermode InteractiveServer


<br />
<div class="container">
    <div class="grid">
        <!--Matches History -->
        <div class="grid-item news">
            <h2>Recent Results</h2>
            <MudTable T="Match" Items="@Matches" Hover="false" Bordered="false">
                <HeaderContent>
                    <MudTh>Match Name</MudTh>
                    <MudTh>Match Date</MudTh>
                    <MudTh>Tournament ID</MudTh>
                </HeaderContent>

                <RowTemplate>
                    <MudTd>
                        <div class="row-container" @onclick="@(() => NavigateToMatch(context))">
                            <img src="@GetTeamLogo(context.Team1ID)" class="team-logo" />
                            <span class="team-name">@($"{context.MatchName.Split(" vs ")[0]} {context.Team1Score} : {context.Team2Score} ") </span>
                            <img src="@GetTeamLogo(context.Team2ID)" class="team-logo" />
                            <span class="team-name">@($"{context.MatchName.Split(" vs ")[1]} ")</span>
                        </div>
                    </MudTd>
                    <MudTd>@context.MatchDate.ToShortDateString()</MudTd>
                    <MudTd>@context.TournamentID</MudTd>
                </RowTemplate>
            </MudTable>
        </div>

        <!-- Upcoming Matches -->
        <div class="grid-item upcoming-matches">
            <h2>Player Drafts</h2>
            <p>Cards</p>
        </div>

        <!-- Leaderboard -->
        <div class="grid-item leaderboard">
            <h2>Leaderboard</h2>
            <MudTable T="Team" Items="@Teams" Hover="false" Bordered="false" Class="custom-leaderboard-table">
                <RowTemplate>
                    <MudTd>
                        <div class="row-container" @onclick="@(() => NavigateToTeam(context))">
                            <span class="position">@Teams.IndexOf(context) + 1</span>
                            <img src="@context.LogoUrl" alt="@context.TeamName Logo" class="team-logo" />
                            <span class="team-name">@context.TeamName</span>
                            <span class="elo">@($"{context.CurrentElo} RP")</span>
                        </div>
                    </MudTd>
                </RowTemplate>
            </MudTable>
            <p> Last Updated @DateTime.Now.Day</p>
        </div>

        <!-- Recent Matches -->
        <div class="grid-item recent-matches">
            <h2>Team Metrics</h2>
            <h6>Study and compare teams </h6>
            <MudImage Src="Images/Teams/teamGraphs2023.png" Alt="Team Graphs"
            Style="width: 400px; height: auto; display: block; margin: 0 auto;" />

        </div>

        <!-- Card Draft -->
        <div class="grid-item card-draft">
            <h2>Region Performance</h2>
            <p>region graphs</p>
        </div>

        <!-- Regional Leaderboard -->
        <div class="grid-item regional-leaderboard">
            <h2>About Elo Engine</h2>
            <p>elo article</p>
        </div>

        <!-- Team of the Week -->
        <div class="grid-item team-week">
            <h2>Ubisoft Newsletter</h2>
            <p>news articles</p>
        </div>

        <!-- Match Replay -->
        <div class="grid-item match-replay">
            <p>Match Replay</p>
        </div>
    </div>
</div>

@code {
    [Inject] private NavigationManager NavigationManager { get; set; } = default!;
    private List<Team> Teams = new List<Team>();
    private List<Match> Matches = new List<Match>();
    private Dictionary<int, string> TeamLogoCache = new();

    private void NavigateToMatch(Match match)
    {
        NavigationManager.NavigateTo($"/matches/details?matchid={match.MatchID}");
    }

    protected override async Task OnInitializedAsync()
    {
        using var context = await DbFactory.CreateDbContextAsync();
        Teams = await context.Teams
            .Where(t => t.IsActive)
            .OrderByDescending(t => t.CurrentElo)
            .Take(12)
            .ToListAsync();

        Matches = await context.Matches
            .OrderByDescending(m => m.MatchDate)
            .Take(10)
            .ToListAsync();
    }

    private void NavigateToTeam(Team team)
    {
        var teamName = team.TeamName;
        NavigationManager.NavigateTo($"/teams/{teamName}");
    }

    private async Task<string> ToTeamLogo(int teamID)
    {
        // Check cache first
        if (TeamLogoCache.TryGetValue(teamID, out var logoUrl))
        {
            return logoUrl;
        }

        // Fetch from database
        using var context = await DbFactory.CreateDbContextAsync();
        var team = await context.Teams.FirstOrDefaultAsync(t => t.TeamID == teamID);

        // Cache the result
        logoUrl = team?.LogoUrl ?? "default-logo.png";
        TeamLogoCache[teamID] = logoUrl;

        return logoUrl;
    }
    private string GetTeamLogo(int teamID)
    {
    // Use default placeholder while fetching
    if (!TeamLogoCache.ContainsKey(teamID))
    {
        _ = FetchAndCacheLogo(teamID); 
        return "defaultlogo.png";
    }

    return TeamLogoCache[teamID];
    }

    private async Task FetchAndCacheLogo(int teamID)
    {
        var logoUrl = await ToTeamLogo(teamID);
        InvokeAsync(() =>
        {
            StateHasChanged();
        });
    }
}