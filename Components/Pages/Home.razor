@page "/"

@using R6Ranking.Models
@using Microsoft.EntityFrameworkCore
@using R6Ranking.Data
@using R6Ranking.Components.Splashable
@inject IDbContextFactory<R6Ranking.Data.R6EsportsDbContext> DbFactory
@inject NavigationManager NavManager
@rendermode InteractiveServer


<br />
<div class="container">
    <div class="grid">

        <!-- Team Metrics -->
        <div class="grid-item b6x1" style="text-align: center; padding: 10px; display: flex; flex-direction: column; align-items: center;">
            <h2 style="margin-bottom: 10px;">Team Metrics</h2>
            <img src="Images/Teams/teamGraphs2023.png"
                 alt="Team Metrics Graph"
                 style="max-width: 335px; width: 100%; height: 150%; max-height: 3200px; height: auto; border-radius: 8px; margin-bottom: 10px;" />
            <p style="margin: 10px 0;">Study and compare team statistics.</p>
            <div>
                <MudButton Variant="Variant.Outlined" Style="background-color:var(--bs-cream--1)" Href="/teams/compare">
                    Learn More
                </MudButton>
            </div>
        </div>
                
        <!-- Player Draft -->
        <div class="grid-item b6x1" style="text-align: start; padding: 1px; display: flex; flex-direction: column; align-items: center;">
            <h2 style="margin-bottom: 2px;">Player Draft</h2>
            <div style="width: 100%; max-width: 335px; height: 60%; max-height: 320px; overflow: hidden; border-radius: 8px; margin-bottom: 1px;">
                <img src="Images/Players/players.png"
                     alt="Player Draft Image"
                     style="width: 100%; height: auto; object-fit: cover;" />
            </div>
            <p style="margin: 2px 0;">Collect, track, and upgrade player cards.</p>
            <div>
                <MudButton Variant="Variant.Outlined" Href="/players/draft" Style="background-color:var(--bs-cream--1)">
                    Try it now
                </MudButton>
            </div>
        </div>

        <!-- Leaderboard -->
        <div class="grid-item b6x4">
            <h2>Leaderboard</h2>
            <MudTable T="Team" Items="@Teams" Hover="false" Bordered="false" Class="custom-leaderboard-table">
                <RowTemplate>
                    <MudTd>
                        <div class="row-container" @onclick="@(() => NavigateToTeam(context))">
                            <span class="position">@(@Teams.IndexOf(context) + 1)</span>
                            <img src="@context.LogoUrl" alt="@context.TeamName Logo" class="team-logo" />
                            <span class="team-name">@context.TeamName</span>
                            <span> </span>
                            <span class="elo">@($"{context.CurrentElo} RP")</span>
                        </div>
                    </MudTd>
                </RowTemplate>
            </MudTable>
            <p> Last Updated @DateTime.Now.Day</p>
        </div>

        <!-- Recent Matches -->
        <div class="grid-item b6x3">
            <h2>Recent Results</h2>
            <MudTable T="Match" Items="@Matches" Hover="false" Bordered="false" Class="custom-leaderboard-table" Style="width: 100%; max-width: 800px;">
                <RowTemplate>
                    <MudTd>
                        <div class="row-container" @onclick="@(() => NavigateToMatch(context))" style="white-space: nowrap;">
                            <img src="@GetTeamLogo(context.Team1ID)" style="width: 25px; height: 25px;" />
                            <span>
                                @($"{context.MatchName.Split(" vs ")[0]} {context.Team1Score} : {context.Team2Score} {context.MatchName.Split(" vs ")[1]} ")
                            </span>
                            <span>@context.MatchDate.ToShortDateString()</span>
                            <span>@context.TournamentID</span>
                        </div>
                    </MudTd>
                </RowTemplate>
            </MudTable>
        </div>
        
        <!-- Ubisoft Newsletter -->
        <div class="grid-item b6x1" style="position: relative; text-align: center; padding: 10px; display: flex; 
                flex-direction: column; align-items: center; height: 300px; width: 100%;">
            <ArticleDisplay /> 
        </div>

        <!-- About -->
        <div class="grid-item b3x1">
            <h2>About Elo Engine</h2>
            <p>elo article</p>
        </div>
        <!-- Region Performance -->
        <div class="grid-item b3x1">
            <h2>Region Performance</h2>
            <p>region graphs</p>
        </div>
        <!-- Match Replay -->
        <div class="grid-item b6x1">
            <p>Match Replay</p>
        </div>
    </div>
</div>

@code {
    [Inject] private NavigationManager NavigationManager { get; set; } = default!;
    private List<Team> Teams = new List<Team>();
    private List<Match> Matches = new List<Match>();
    private Dictionary<int, string> TeamLogoCache = new();
    
    protected override async Task OnInitializedAsync()
    {
        using var context = await DbFactory.CreateDbContextAsync();

        Teams = await context.Teams
            .Where(t => t.IsActive)
            .OrderByDescending(t => t.CurrentElo)
            .Take(12)
            .ToListAsync();

        Matches = await context.Matches
            .OrderByDescending(m => m.MatchDate)
            .Take(8)
            .ToListAsync();
    }

    private void NavigateToTeam(Team team)
    {
        var teamName = team.TeamName;
        NavigationManager.NavigateTo($"/teams/{teamName}");
    }
    private void NavigateToMatch(Match match)
    {
        NavigationManager.NavigateTo($"/matches/details?matchid={match.MatchID}");
    }

    private async Task<string> ToTeamLogo(int teamID)
    {
        // Check cache first
        if (TeamLogoCache.TryGetValue(teamID, out var logoUrl))
        {
            return logoUrl;
        }

        // Fetch from database
        using var context = await DbFactory.CreateDbContextAsync();
        var team = await context.Teams.FirstOrDefaultAsync(t => t.TeamID == teamID);

        // Cache the result
        logoUrl = team?.LogoUrl ?? "Images/Logos/default-logo.png";
        TeamLogoCache[teamID] = logoUrl;

        return logoUrl;
    }
    private string GetTeamLogo(int teamID){
        if (!TeamLogoCache.ContainsKey(teamID))
        {
            _ = FetchAndCacheLogo(teamID); 
            return "defaultlogo.png";
        }

        return TeamLogoCache[teamID];
    }
    private async Task FetchAndCacheLogo(int teamID)
    {
        var logoUrl = await ToTeamLogo(teamID);
        InvokeAsync(() =>
        {
            StateHasChanged();
        });
    }

}