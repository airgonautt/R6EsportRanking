@page "/"

@using R6Ranking.Models
@using Microsoft.EntityFrameworkCore
@using R6Ranking.Data
@using R6Ranking.Components.Splashable
@inject IDbContextFactory<R6Ranking.Data.R6EsportsDbContext> DbFactory
@inject NavigationManager NavManager
@rendermode InteractiveServer

<AuthorizeView>
    <Authorized>
        <h4>Logged in as <b>@context.User.Identity.Name</b></h4>
    </Authorized>
</AuthorizeView>
<div class="container">

    <div class="grid">

        <!-- Team Metrics -->
        <div class="grid-item b6x1" style="text-align: center; padding: 10px; display: flex; flex-direction: column; align-items: center;">
            <h2 style="margin-bottom: 10px;">Team Metrics</h2>
            <img src="Images/Teams/teamGraphs2023.png"
                 alt="Team Metrics Graph"
                 class="img-fluid rounded mb-3" />
            <p>Study and compare team statistics.</p>
            <a class="btn btn-outline-secondary" href="/teams/compare">Learn More</a>
        </div>

        <!-- Player Draft -->
        <div class="grid-item b6x1" style="text-align: start; padding: 1px; display: flex; flex-direction: column; align-items: center;">
            <h2 style="margin-bottom: 10px;">Player Draft</h2>
            <div class="mb-3">
                <img src="Images/Players/players.png"
                     alt="Player Draft Image"
                     class="img-fluid rounded" />
            </div>
            <p>Collect, track, and upgrade player cards.</p>
            <a class="btn btn-outline-secondary" href="/players/draft">Try it now</a>
        </div>

        <!-- Leaderboard -->
        <div class="grid-item b6x4">
            <h2>Leaderboard</h2>
            <table class="table table-hover custom-leaderboard-table">
                <tbody>
                    @foreach (var team in Teams)
                    {
                        <tr @onclick="() => NavigateToTeam(team)">
                            <td>
                                <div class="d-flex align-items-center">
                                    <span class="me-2">@(@Teams.IndexOf(team) + 1)</span>
                                    <img src="@team.LogoUrl" alt="@team.TeamName Logo" class="team-logo me-2" />
                                    <span class="me-auto">@team.TeamName</span>
                                    <span>@($"{team.CurrentElo} RP")</span>
                                </div>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
            <p>Last Updated @DateTime.Now.Day</p>
        </div>

        <!-- Recent Matches -->
        <div class="grid-item b6x3">
            <h2>Recent Matches</h2>
            <table class="table table-hover custom-leaderboard-table">
                <tbody>
                    @foreach (var match in Matches)
                    {
                        <tr @onclick="() => NavigateToMatch(match)">
                            <td>
                                
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>

        <!-- Ubisoft Newsletter -->
        <div class="grid-item b6x1" style="position: relative; text-align: center; padding: 10px; display: flex;
                flex-direction: column; align-items: center; height: 300px; width: 100%;">
            <ArticleDisplay />
        </div>

        <!-- About -->
        <div class="grid-item b3x1">
            <h2>About Elo Engine</h2>
            <p>elo article</p>
        </div>
        <!-- Region Performance -->
        <div class="grid-item b3x1">
            <h2>Region Performance</h2>
            <p>region graphs</p>
        </div>
        <!-- Match Replay -->
        <div class="grid-item b6x1">
            <p>Match Replay</p>
        </div>
    </div>
</div>

@code {
    [Inject] private NavigationManager NavigationManager { get; set; } = default!;
    private List<Team> Teams = new List<Team>();
    private List<Match> Matches = new List<Match>();
    private Dictionary<int, string> TeamLogoCache = new();

    protected override async Task OnInitializedAsync()
    {
        using var context = await DbFactory.CreateDbContextAsync();

        Teams = await context.Teams
            .Where(t => t.IsActive)
            .OrderByDescending(t => t.CurrentElo)
            .Take(12)
            .ToListAsync();

        Matches = await context.Matches
            .OrderByDescending(m => m.MatchDate)
            .Take(8)
            .ToListAsync();
    }

    private void NavigateToTeam(Team team)
    {
        var teamName = team.TeamName;
        NavigationManager.NavigateTo($"/teams/{teamName}");
    }
    private void NavigateToMatch(Match match)
    {
        NavigationManager.NavigateTo($"/matches/details?matchid={match.MatchID}");
    }

    private async Task<string> ToTeamLogo(int teamID)
    {
        // Check cache first
        if (TeamLogoCache.TryGetValue(teamID, out var logoUrl))
        {
            return logoUrl;
        }

        // Fetch from database
        using var context = await DbFactory.CreateDbContextAsync();
        var team = await context.Teams.FirstOrDefaultAsync(t => t.TeamID == teamID);

        // Cache the result
        logoUrl = team?.LogoUrl ?? "Images/Logos/default-logo.png";
        TeamLogoCache[teamID] = logoUrl;

        return logoUrl;
    }
    private string GetTeamLogo(int teamID)
    {
        if (!TeamLogoCache.ContainsKey(teamID))
        {
            _ = FetchAndCacheLogo(teamID);
            return "defaultlogo.png";
        }

        return TeamLogoCache[teamID];
    }
    private async Task FetchAndCacheLogo(int teamID)
    {
        var logoUrl = await ToTeamLogo(teamID);
        InvokeAsync(() =>
        {
            StateHasChanged();
        });
    }

}
