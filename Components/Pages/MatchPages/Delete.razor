@page "/matches/delete"
@using Microsoft.EntityFrameworkCore
@using R6Ranking.Models
@inject IDbContextFactory<R6Ranking.Data.R6EsportsDbContext> DbFactory
@inject NavigationManager NavigationManager

<PageTitle>Delete</PageTitle>

<h1>Delete</h1>

<p>Are you sure you want to delete this?</p>
<div>
    <h2>Match</h2>
    <hr />
    @if (match is null)
    {
        <p><em>Loading...</em></p>
    }
    else {
        <dl class="row">
            <dt class="col-sm-2">MatchName</dt>
            <dd class="col-sm-10">@match.MatchName</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">Team1ID</dt>
            <dd class="col-sm-10">@match.Team1ID</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">Team1Score</dt>
            <dd class="col-sm-10">@match.Team1Score</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">Team2ID</dt>
            <dd class="col-sm-10">@match.Team2ID</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">Team2Score</dt>
            <dd class="col-sm-10">@match.Team2Score</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">MatchDate</dt>
            <dd class="col-sm-10">@match.MatchDate</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">MapID</dt>
            <dd class="col-sm-10">@match.MapID</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">TournamentID</dt>
            <dd class="col-sm-10">@match.TournamentID</dd>
        </dl>
        <EditForm method="post" Model="match" OnValidSubmit="DeleteMatch" FormName="delete" Enhance>
            <button type="submit" class="btn btn-danger" disabled="@(match is null)">Delete</button> |
            <a href="/matches">Back to List</a>
        </EditForm>
    }
</div>

@code {
    private Match? match;

    [SupplyParameterFromQuery]
    private int MatchID { get; set; }

    protected override async Task OnInitializedAsync()
    {
        using var context = DbFactory.CreateDbContext();
        match = await context.Matches.FirstOrDefaultAsync(m => m.MatchID == MatchID);

        if (match is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }

    private async Task DeleteMatch()
    {
        using var context = DbFactory.CreateDbContext();
        context.Matches.Remove(match!);
        await context.SaveChangesAsync();
        NavigationManager.NavigateTo("/matches");
    }
}
