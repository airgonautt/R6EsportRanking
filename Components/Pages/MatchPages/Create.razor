@page "/matches/create"
@attribute [Authorize(Policy = UserPolicy.ADD)]

@using Microsoft.EntityFrameworkCore
@using System.Text.Json
@using R6Ranking.Data
@using R6Ranking.Models
@using Microsoft.AspNetCore.Authorization
@inject IDbContextFactory<R6Ranking.Data.R6EsportsDbContext> DbFactory
@inject NavigationManager NavigationManager

<PageTitle>Create</PageTitle>

<h1>Create</h1>

<h2>Match</h2>
<hr />
<div class="row">
    <div class="col-md-4">
        <EditForm method="post" Model="Match" OnValidSubmit="AddMatch" FormName="create" Enhance>
            <DataAnnotationsValidator />
            <ValidationSummary class="text-danger" role="alert" />

            <div class="mb-3">
                <label>Team 1:</label>
                <InputSelect @bind-Value="Match.Team1ID" class="form-control">
                    <option value="">Select Team 1</option>
                    @foreach (var team in Teams)
                    {
                        <option value="@team.TeamID">@team.TeamName</option>
                    }
                </InputSelect>
            </div>

            <div class="mb-3">
                <label>Team 2:</label>
                <InputSelect @bind-Value="Match.Team2ID" class="form-control">
                    <option value="">Select Team 2</option>
                    @foreach (var team in Teams)
                    {
                        <option value="@team.TeamID">@team.TeamName</option>
                    }
                </InputSelect>
            </div>

            <div class="mb-3">
                <label for="team1score" class="form-label">Team1Score:</label>
                <InputNumber id="team1score" @bind-Value="Match.Team1Score" class="form-control" />
                <ValidationMessage For="() => Match.Team1Score" class="text-danger" />
            </div>

            <div class="mb-3">
                <label for="team2score" class="form-label">Team2Score:</label>
                <InputNumber id="team2score" @bind-Value="Match.Team2Score" class="form-control" />
                <ValidationMessage For="() => Match.Team2Score" class="text-danger" />
            </div>

            <div class="mb-3">
                <label for="matchdate" class="form-label">MatchDate:</label>
                <InputDate id="matchdate" @bind-Value="Match.MatchDate" class="form-control" />
                <ValidationMessage For="() => Match.MatchDate" class="text-danger" />
            </div>

            <div class="mb-3">
                <label for="matchURL" class="form-label">MatchURL:</label>
                <InputText id="matchURL" @bind-Value="Match.VODURL" class="form-control" />
                <ValidationMessage For="() => Match.VODURL" class="text-danger" />
            </div>

            <div class="mb-3">
                <label>Map:</label>
                <InputSelect @bind-Value="Match.MapID" class="form-control">
                    <option value="">Select Map</option>
                    @foreach (var map in Maps)
                    {
                        <option value="@map.MapID">@map.MapName</option>
                    }
                </InputSelect>
            </div>

            <div class="mb-3">
                <label>Tournament:</label>
                <InputSelect @bind-Value="Match.TournamentID" class="form-control">
                    <option value="">Select Tournament</option>
                    @foreach (var tournament in Tournaments)
                    {
                        <option value="@tournament.TournamentID">@tournament.TournamentName</option>
                    }
                </InputSelect>
            </div>

            <div class="mb-3">
                <label for="team1operatorban1">Team 1 Operator Ban 1:</label>
                <InputSelect @bind-Value="Match.Team1Ban1" class="form-control">
                    <option value="">Select Operator Ban</option>
                    @foreach (var ban in OperatorBans)
                    {
                        <option value="@ban.OperatorBanID">@ban.OperatorName</option>
                    }
                </InputSelect>
            </div>

            <div class="mb-3">
                <label for="team2operatorban1">Team 2 Operator Ban 1:</label>
                <InputSelect @bind-Value="Match.Team2Ban1" class="form-control">
                    <option value="">Select Operator Ban</option>
                    @foreach (var ban in OperatorBans)
                    {
                        <option value="@ban.OperatorBanID">@ban.OperatorName</option>
                    }
                </InputSelect>
            </div>

            <div class="mb-3">
                <label for="team1operatorban2">Team 1 Operator Ban 2:</label>
                <InputSelect @bind-Value="Match.Team1Ban2" class="form-control">
                    <option value="">Select Operator Ban</option>
                    @foreach (var ban in OperatorBans)
                    {
                        <option value="@ban.OperatorBanID">@ban.OperatorName</option>
                    }
                </InputSelect>
            </div>

            <div class="mb-3">
                <label for="team2operatorban2">Team 2 Operator Ban 2:</label>
                <InputSelect @bind-Value="Match.Team2Ban2" class="form-control">
                    <option value="">Select Operator Ban</option>
                    @foreach (var ban in OperatorBans)
                    {
                        <option value="@ban.OperatorBanID">@ban.OperatorName</option>
                    }
                </InputSelect>
            </div>

            <div class="mb-3">
                <label>
                    <InputCheckbox unchecked @bind-value="Match.isBo3" />
                    is BO3?
                </label>
            </div>

            <div class="mb-3">
                <label>
                    <InputCheckbox unchecked @bind-value="Match.isInternational" />
                    is Interantional Match?
                </label>
            </div>

            <button type="submit" class="btn btn-primary">Create</button>
        </EditForm>
    </div>
</div>

<div>
    <a href="/matches">Back to List</a>
</div>

@code {

    [SupplyParameterFromForm]
    private Match Match { get; set; } = new();
    private List<Team> Teams { get; set; } = new();
    private List<Map> Maps { get; set; } = new();
    private List<Tournament> Tournaments { get; set; } = new();
    private List<TeamOperatorBan> TeamOperatorBans { get; set; } = new();
    public List<OperatorBan> OperatorBans { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {
        using var context = DbFactory.CreateDbContext();
        Teams = await context.Teams
            .Where(t => t.IsActive)
            .ToListAsync();
        Maps = await context.Maps.ToListAsync();
        Tournaments = await context.Tournaments
            .Where(t => t.IsCurrentTournament)
            .ToListAsync();
        OperatorBans = await context.OperatorBans.ToListAsync();
        TeamOperatorBans = await context.TeamOperatorBans.ToListAsync();
    }

    private async Task AddMatch()
    {
        using var context = DbFactory.CreateDbContext();
        using var transaction = await context.Database.BeginTransactionAsync();

        // Fetch teams
        var team1 = await context.Teams.FindAsync(Match.Team1ID);
        var team2 = await context.Teams.FindAsync(Match.Team2ID);

        Match.MatchName = $"{team1.TeamName} vs {team2.TeamName}";

        //initialized
        context.Matches.Add(Match);
        await context.SaveChangesAsync();

        //elo logic+history
        await UpdateEloAndSaveHistoryAsync(context, team1, team2, Match);

        //ban history
         await SaveOperatorBansAsync(context, Match.MatchID);

        await transaction.CommitAsync();
        NavigationManager.NavigateTo("/matches");

    }

    private async Task UpdateEloAndSaveHistoryAsync(R6EsportsDbContext context, Team team1, Team team2, Match match )
    {

        if (team1 == null || team2 == null)
        {
            throw new InvalidOperationException("One or both teams could not be found.");
        }

        // Update Elo
        (int team1EloChange, int team2EloChange) = CalculateEloChange(Match.isBo3, team1.CurrentElo, team2.CurrentElo, match.Team1Score, match.Team2Score);
        team1.CurrentElo += team1EloChange;
        team2.CurrentElo += team2EloChange;

        var tournament = await context.Tournaments.FindAsync(match.TournamentID);

        var team1EloHistory = new TeamEloChange
        {
            TeamID = team1.TeamID,
            RivalTeamID = team2.TeamID,
            CurrentElo = team1.CurrentElo,
            EloChange = team1EloChange,
            Date = Match.MatchDate,
            Note = $"VS {team2.TeamName} on {tournament.TournamentName} - {match.MatchDate:MM/dd/yy}"
        };

        var team2EloHistory = new TeamEloChange
        {
            TeamID = team2.TeamID,
            RivalTeamID = team1.TeamID,
            CurrentElo = team2.CurrentElo,
            EloChange = team2EloChange,
            Date = Match.MatchDate,
            Note = $"VS {team1.TeamName} on {tournament.TournamentName} - {match.MatchDate:MM/dd/yy}"
        };

        // Upload to DB
        context.TeamEloChanges.AddRange(team1EloHistory, team2EloHistory);

        //region elo logic+history
        if (Match.isInternational)
        {
            var team1Region = await context.Regions.FindAsync(team1?.RegionID);
            var team2Region = await context.Regions.FindAsync(team2?.RegionID);

            team1Region.RegionalElo += team1EloChange;
            team2Region.RegionalElo += team2EloChange;

            var team1RegionEloHistory = new RegionEloChange
            {
                RegionID = team1Region.RegionID,
                ChangeDate = match.MatchDate,
                CurrentElo = team1Region.RegionalElo,
                EloChange = team1EloChange,
                Note = $"{team1.TeamName}({team1Region.RegionID}) VS {team2.TeamName}({team2Region.RegionID}) on {tournament.TournamentName}"
            };
            var team2RegionEloHistory = new RegionEloChange
            {
                RegionID = team2Region.RegionID,
                ChangeDate = match.MatchDate,
                CurrentElo = team2Region.RegionalElo,
                EloChange = team2EloChange,
                Note = $"{team2.TeamName}({team2Region.RegionID}) VS {team1.TeamName}({team1Region.RegionID}) on {tournament.TournamentName}"
            };
            context.RegionEloChanges.AddRange(team1RegionEloHistory, team2RegionEloHistory);

        }

        await context.SaveChangesAsync();
    }

    private (int team1EloChange, int team2EloChange) CalculateEloChange(bool isBo3, int team1Elo, int team2Elo, int team1Score, int team2Score)
    {
        // K-factor
        int kFactor = isBo3 ? 30 : 45;

        // Actual scores
        double actualScoreTeam1 = team1Score > team2Score
            ? (team1Score - team2Score < 2 ? 0.75 : 1.0): 0.0;
        double actualScoreTeam2 = 1.0 - actualScoreTeam1;

        // Expected scores
        double expectedTeam1 = 1.0 / (1.0 + Math.Pow(10, (team2Elo - team1Elo) / 500.0));
        double expectedTeam2 = 1.0 - expectedTeam1; 

        // Calculate Elo changes
        double team1EloChange = kFactor * (actualScoreTeam1 - expectedTeam1);
        double team2EloChange = kFactor * (actualScoreTeam2 - expectedTeam2);

        return ((int)Math.Round(team1EloChange), (int)Math.Round(team2EloChange));
    }

    private async Task SaveOperatorBansAsync(R6EsportsDbContext context, int matchId) {

        Console.WriteLine($"Team1OperatorBan1: {Match.Team1Ban1}, Team2OperatorBan1: {Match.Team2Ban1}");
        Console.WriteLine($"Team1OperatorBan2: {Match.Team1Ban2}, Team2OperatorBan2: {Match.Team1Ban1}");

        if (Match.Team1Ban1 == null || Match.Team2Ban1 == null ||
            Match.Team1Ban2 == null || Match.Team2Ban2 == null)
        {
            throw new InvalidOperationException("Operator bans must be selected for both teams.");
        }

        else {
            var teamOperatorBans = new List<TeamOperatorBan> {
                new TeamOperatorBan
                {
                    MatchId = matchId,
                    TeamID = Match.Team1ID,
                    OperatorBanID = Match.Team1Ban1
                },
                new TeamOperatorBan
                {
                    MatchId = matchId,
                    TeamID = Match.Team2ID,
                    OperatorBanID = Match.Team2Ban1
                },
                new TeamOperatorBan
                {
                    MatchId = matchId,
                    TeamID = Match.Team1ID,
                    OperatorBanID = Match.Team1Ban2
                },
                new TeamOperatorBan
                {
                    MatchId = matchId,
                    TeamID = Match.Team2ID,
                    OperatorBanID = Match.Team2Ban2
                }
            };

            context.TeamOperatorBans.AddRange(teamOperatorBans);
            await context.SaveChangesAsync();
        }
    }
}
