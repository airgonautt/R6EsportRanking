@page "/regions/delete"

@using Microsoft.EntityFrameworkCore
@using R6Ranking.Models
@inject IDbContextFactory<R6Ranking.Data.R6EsportsDbContext> DbFactory
@inject NavigationManager NavigationManager


<PageTitle>Delete</PageTitle>

<h1>Delete</h1>

<h3>Are you sure you want to delete this?</h3>
<div>
    <h4>Region</h4>
    <hr />
    @if (region is null)
    {
        <p><em>Loading...</em></p>
    }
    else {
        <dl class="row">
            <dt class="col-sm-2">RegionName</dt>
            <dd class="col-sm-10">@region.RegionName</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">CreatedAt</dt>
            <dd class="col-sm-10">@region.CreatedAt</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">UpdatedAt</dt>
            <dd class="col-sm-10">@region.UpdatedAt</dd>
        </dl>
        <EditForm method="post" Model="region" OnValidSubmit="DeleteRegion" FormName="delete" Enhance>
            <button type="submit" class="btn btn-danger" disabled="@(region is null)">Delete</button> |
            <a href="/regions">Back to List</a>
        </EditForm>
    }
</div>

@code {
    Region? region;

    [SupplyParameterFromQuery]
    public int RegionID { get; set; }

    protected override async Task OnInitializedAsync()
    {
        using var context = DbFactory.CreateDbContext();
        region = await context.Regions.FirstOrDefaultAsync(m => m.RegionID == RegionID);

        if (region is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }

    public async Task DeleteRegion()
    {
        using var context = DbFactory.CreateDbContext();
        context.Regions.Remove(region!);
        await context.SaveChangesAsync();
        NavigationManager.NavigateTo("/regions");
    }
}
