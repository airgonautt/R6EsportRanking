@page "/regions"

@using Microsoft.EntityFrameworkCore
@using R6Ranking.Models
@using R6Ranking.Data
@using BlazorBootstrap
@inject IDbContextFactory<R6Ranking.Data.R6EsportsDbContext> DbFactory
@implements IAsyncDisposable
@rendermode InteractiveServer

<div style="padding: 0% 8% 1%;">
    
    <div class="container-fluid" style="background-color:rgba(29, 30, 33, 0.84);">
        <h1 style="color: var(--bs-white--1)">Regions</h1>

        <div class="row h-28">
            <!-- Map  -->
            <div class="col-6 d-flex align-items-center justify-content-center">
                <div class="map-container border rounded p-3 w-100 h-100">
                    @foreach (var region in Regions)
                    {
                        <img src="/Images/Region/@region.RegionMap"
                             alt="@region.RegionName Map"
                             class="region-map"
                             style="filter: @((HoveredRegionID == region.RegionID)
                                     ? $"brightness(1.2) drop-shadow(1px 1px 2px {region.SocialUrl})"
                                     : "brightness(0)");"
                             data-region="@region.RegionID" />
                    }
                    <img src="/Images/Region/map.png"
                         alt="World Map"
                         class="region-map"
                         style="filter: brightness(0);" />
                </div>
            </div>

            <!-- Regions List -->
            <div class="col-3 d-flex align-items-center justify-content-center">
                <table class="table table-hover w-70">
                    <tbody style="padding: 0; margin-0;">
                        @foreach (var region in Regions)
                        {
                            <tr @onmouseover="@(() => HoverRegion(region.RegionID))"
                                @onmouseout="@ClearHoverRegion"
                                style="background-color: @region.SocialUrl;">
                                <td style="color: var(--bs-white--1); padding: 0; margin-0; font-size: 1rem; filter: drop-shadow(1px 1px 1px var(--bs-black--3));">
                                    <img src="/Images/Logos/region.png" alt="@region.RegionName Logo"
                                         class="region-logo me-2" />
                                    @region.RegionName
                                    @region.RegionalElo
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        </div>

        <h1 style="color: var(--bs-white--1)">Region Metrics</h1>

        <div class="row h-72">
            <!-- Doughnut Chart -->
            <div class="col-6 d-flex align-items-center justify-content-center">
                <div class="chart-container">
                    <DoughnutChart @ref="doughnutChart" Width="300" />
                </div>
            </div>

            <!-- Line Chart -->
            <div class="col-6 d-flex flex-column align-items-center justify-content-center">
                <LineChart @ref="lineChart" Width="500" Height="350" />
            </div>
        </div>
    </div>

    <!-- Region RP History -->
    <div class="mt-4">
        <Content>
            <Grid TItem="RegionEloChange"
                Class="table table-hover table-bordered table-striped custom-grid"
                DataProvider="RegionEloChangesDataProvider"
                AllowFiltering="true"
                AllowPaging="true"
                AllowSorting="true"
                Responsive="true">
            </Grid>
        </Content>
    </div>
</div>

@code {
    private List<Region> Regions = new();
    R6EsportsDbContext context = default!;
    private string? HoveredRegionID;
    private List<RegionEloChange> eloHistory = new();
    private DoughnutChart doughnutChart = default!;
    private ChartData chartData = new();

    private LineChart lineChart = default!;
    private ChartData lineChartData = new();

    protected override async Task OnInitializedAsync()
    {
        context = DbFactory.CreateDbContext();
        Regions = await context.Regions
            .OrderByDescending(r => r.RegionalElo)
            .ToListAsync();

        if (Regions.Any())
        {
            InitializeDoughnutChart();
            await InitializeLineChartAsync();
        }
    }

    private void HoverRegion(string regionId)
    {
        HoveredRegionID = regionId;
    }

    private void ClearHoverRegion()
    {
        HoveredRegionID = null;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            // Small delay to ensure rendering is complete
            await Task.Delay(500);

            // Initialize the charts if the regions have been loaded
            if (Regions.Any())
            {
                await doughnutChart.InitializeAsync(chartData, new DoughnutChartOptions { Responsive = true });
                await lineChart.InitializeAsync(lineChartData, new LineChartOptions { Responsive = true });
            }
        }
    }

    private void InitializeDoughnutChart()
    {
        chartData = new ChartData
            {
                Labels = Regions.Select(r => r.RegionName).ToList(),
                Datasets = new List<IChartDataset>
            {
                new DoughnutChartDataset
                {
                    Data = Regions.Select(r => (double?)r.RegionalElo).ToList(),
                    BackgroundColor = Regions.Select(r => r.SocialUrl).ToList()
                }
            }
            };
    }

    private async Task InitializeLineChartAsync()
    {
        eloHistory = await context.RegionEloChanges
            .Include(h => h.Region)
            .OrderBy(h => h.ChangeDate)
            .ToListAsync();

        var groupedData = eloHistory.GroupBy(h => h.RegionID);
        var datasets = new List<IChartDataset>();

        foreach (var group in groupedData)
        {
            var region = Regions.FirstOrDefault(r => r.RegionID == group.Key);
            if (region is not null)
            {
                datasets.Add(new LineChartDataset
                    {
                        Label = region.RegionName,
                        Data = group.Select(h => (double?)h.CurrentElo).ToList(),
                        BorderColor = region.SocialUrl,
                        BackgroundColor = region.SocialUrl,
                        Fill = false
                    });
            }
        }

        lineChartData = new ChartData
            {
                Labels = eloHistory
                    .Select(h => h.ChangeDate.ToString("MMM dd"))
                    .Distinct()
                    .ToList(),
                Datasets = datasets
            };
    }

    private async Task<GridDataProviderResult<RegionEloChange>> RegionEloChangesDataProvider(GridDataProviderRequest<RegionEloChange> request)
    {
        var query = eloHistory.AsQueryable();

        if (request.Sorting is not null && request.Sorting.Any())
        {
            var sort = request.Sorting.First();
            query = sort.SortDirection == SortDirection.Ascending
                ? query.OrderBy(sort.SortKeySelector)
                : query.OrderByDescending(sort.SortKeySelector);
        }
        else
        {
            query = query.OrderByDescending(item => item.ChangeDate);
        }

        var totalCount = query.Count();
        var data = query.Skip((request.PageNumber - 1) * request.PageSize).Take(request.PageSize).ToList();

        return await Task.FromResult(new GridDataProviderResult<RegionEloChange>
            {
                Data = data,
                TotalCount = totalCount
            });
    }

    public async ValueTask DisposeAsync()
    {
        await context.DisposeAsync();
    }
}


<style>
    .map-container {
        position: relative;
        width: 100%;
        height: auto;
    }

    .region-map {
        position: absolute;
        top: 0;
        left: 0;
        width: 100%;
        height: auto;
        transition: filter 0.3s ease;
        z-index: 1;
    }

    .regions-list {
        width: 40%;
        display: flex;
        flex-direction: column;
        gap: 1rem;
    }

    .region-item {
        font-size: 1.2rem;
        font-weight: bold;
        cursor: pointer;
        transition: color 0.2s ease;
        margin: 0;
        padding: 0;
    }

        .region-item:hover {
            color: var(--bs-gold---1);
        }

    .region-logo {
        width: 40px;
        height: auto;
        margin-right: 10px;
    }

    .chart-container {
        text-align: center;
    }
    .table{
        --bs-table-hover-bg: rrgba(13, 13, 12, 0.06);
    }
</style>
