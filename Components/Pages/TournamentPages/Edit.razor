@page "/Tournaments/edit"
@attribute [Authorize(Policy = UserPolicy.EDIT)]

@using Microsoft.AspNetCore.Authorization
@using Microsoft.EntityFrameworkCore
@using R6Ranking.Models
@inject IDbContextFactory<R6Ranking.Data.R6EsportsDbContext> DbFactory
@inject NavigationManager NavigationManager

<PageTitle>Edit</PageTitle>

<h1>Edit Tournament</h1>

<h4>Tournament</h4>
<hr />
@if (Tournament is null)
{
    <p><em>Loading...</em></p>
}
else
{
    <div class="row">
        <div class="col-md-4">
            <EditForm method="post" Model="Tournament" OnValidSubmit="UpdateTournament" FormName="edit-form">
                <DataAnnotationsValidator />
                <ValidationSummary />
                <input type="hidden" name="Tournament.TournamentID" value="@Tournament.TournamentID" />
                <!-- Other Tournament fields -->

                <div class="col-md-6">
                    <h3>Assigned Teams</h3>
                    <ul class="list-group">
                        @foreach (var team in TournamentTeams)
                        {
                            <li class="list-group-item d-flex justify-content-between align-items-center">
                                @team.TeamName
                                <button class="btn btn-danger btn-sm" @onclick="() => RemoveTeamFromTournament(team.TeamID)">Remove</button>
                            </li>
                        }
                    </ul>

                    <h3 class="mt-4">Available Teams</h3>
                    <ul class="list-group">
                        @foreach (var team in AllTeams)
                        {
                            <li class="list-group-item d-flex justify-content-between align-items-center">
                                @team.TeamName
                                <button class="btn btn-success btn-sm" @onclick="() => AddTeamToTournament(team.TeamID)">Add</button>
                            </li>
                        }
                    </ul>
                </div>

                <button type="submit" class="btn btn-primary">Save</button>
            </EditForm>
        </div>
    </div>
}

<div>
    <a href="/tournaments">Back to List</a>
</div>

@code {
    [SupplyParameterFromQuery]
    public int TournamentID { get; set; }

    public Tournament? Tournament { get; set; }
    private List<Team> AllTeams { get; set; } = new();
    private List<Team> TournamentTeams { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {
        using var context = DbFactory.CreateDbContext();

        // Load tournament details
        Tournament = await context.Tournaments.FirstOrDefaultAsync(t => t.TournamentID == TournamentID);

        if (Tournament == null)
        {
            NavigationManager.NavigateTo("notfound");
            return;
        }

        // Load teams associated with this tournament via TeamTournament
        TournamentTeams = await context.TournamentTeams
            .Where(tt => tt.TournamentID == TournamentID)
            .Select(tt => tt.Team)
            .ToListAsync();

        // Load all teams
        AllTeams = await context.Teams.ToListAsync();
    }

    private async Task AddTeamToTournament(int teamId)
    {
        using var context = DbFactory.CreateDbContext();

        var teamTournament = new TournamentTeam
            {
                TeamID = teamId,
                TournamentID = TournamentID
            };

        context.TournamentTeams.Add(teamTournament);
        await context.SaveChangesAsync();

        // Update the local lists
        TournamentTeams.Add(await context.Teams.FirstOrDefaultAsync(t => t.TeamID == teamId)!);
    }

    private async Task RemoveTeamFromTournament(int teamId)
    {
        using var context = DbFactory.CreateDbContext();

        var teamTournament = await context.TournamentTeams
            .FirstOrDefaultAsync(tt => tt.TeamID == teamId && tt.TournamentID == TournamentID);

        if (teamTournament != null)
        {
            context.TournamentTeams.Remove(teamTournament);
            await context.SaveChangesAsync();

            // Update the local lists
            TournamentTeams.RemoveAll(t => t.TeamID == teamId);
        }
    }

    public async Task UpdateTournament()
    {
        using var context = DbFactory.CreateDbContext();

        var existingTournament = await context.Tournaments.FirstOrDefaultAsync(t => t.TournamentID == TournamentID);

        if (existingTournament != null)
        {
            // Update tournament fields
            existingTournament.TournamentName = Tournament!.TournamentName;
            existingTournament.StartDate = Tournament.StartDate;
            existingTournament.EndDate = Tournament.EndDate;

            await context.SaveChangesAsync();
        }

        NavigationManager.NavigateTo("/tournaments");
    }
}
