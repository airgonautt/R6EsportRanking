@page "/maps/delete"

@using Microsoft.EntityFrameworkCore
@using R6Ranking.Models
@inject IDbContextFactory<R6Ranking.Data.R6EsportsDbContext> DbFactory
@inject NavigationManager NavigationManager


<PageTitle>Delete</PageTitle>

<h1>Delete</h1>

<h3>Are you sure you want to delete this?</h3>
<div>
    <h4>Map</h4>
    <hr />
    @if (map is null)
    {
        <p><em>Loading...</em></p>
    }
    else {
        <dl class="row">
            <dt class="col-sm-2">MapName</dt>
            <dd class="col-sm-10">@map.MapName</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">MapPhoto</dt>
            <dd class="col-sm-10">@map.MapPhoto</dd>
        </dl>
        <EditForm method="post" Model="map" OnValidSubmit="DeleteMap" FormName="delete" Enhance>
            <button type="submit" class="btn btn-danger" disabled="@(map is null)">Delete</button> |
            <a href="/maps">Back to List</a>
        </EditForm>
    }
</div>

@code {
    Map? map;

    [SupplyParameterFromQuery]
    public int MapID { get; set; }

    protected override async Task OnInitializedAsync()
    {
        using var context = DbFactory.CreateDbContext();
        map = await context.Map.FirstOrDefaultAsync(m => m.MapID == MapID);

        if (map is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }

    public async Task DeleteMap()
    {
        using var context = DbFactory.CreateDbContext();
        context.Map.Remove(map!);
        await context.SaveChangesAsync();
        NavigationManager.NavigateTo("/maps");
    }
}
