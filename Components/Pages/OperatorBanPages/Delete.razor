@page "/operatorbans/delete"
@using Microsoft.EntityFrameworkCore
@using R6Ranking.Models
@inject IDbContextFactory<R6Ranking.Data.R6EsportsDbContext> DbFactory
@inject NavigationManager NavigationManager

<PageTitle>Delete</PageTitle>

<h1>Delete</h1>

<p>Are you sure you want to delete this?</p>
<div>
    <h2>OperatorBan</h2>
    <hr />
    @if (operatorban is null)
    {
        <p><em>Loading...</em></p>
    }
    else {
        <dl class="row">
            <dt class="col-sm-2">OperatorName</dt>
            <dd class="col-sm-10">@operatorban.OperatorName</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">OperatorLogo</dt>
            <dd class="col-sm-10">@operatorban.OperatorLogo</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">OperatorSide</dt>
            <dd class="col-sm-10">@operatorban.OperatorSide</dd>
        </dl>
        <EditForm method="post" Model="operatorban" OnValidSubmit="DeleteOperatorBan" FormName="delete" Enhance>
            <button type="submit" class="btn btn-danger" disabled="@(operatorban is null)">Delete</button> |
            <a href="/operatorbans">Back to List</a>
        </EditForm>
    }
</div>

@code {
    private OperatorBan? operatorban;

    [SupplyParameterFromQuery]
    private int OperatorBanID { get; set; }

    protected override async Task OnInitializedAsync()
    {
        using var context = DbFactory.CreateDbContext();
        operatorban = await context.OperatorBans.FirstOrDefaultAsync(m => m.OperatorBanID == OperatorBanID);

        if (operatorban is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }

    private async Task DeleteOperatorBan()
    {
        using var context = DbFactory.CreateDbContext();
        context.OperatorBans.Remove(operatorban!);
        await context.SaveChangesAsync();
        NavigationManager.NavigateTo("/operatorbans");
    }
}
