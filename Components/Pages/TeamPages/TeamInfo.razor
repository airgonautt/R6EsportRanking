@page "/teams/{teamName}"

@using R6Ranking.Models
@using Microsoft.EntityFrameworkCore
@using R6Ranking.Data
@using R6Ranking.Components.Splashable
@inject IDbContextFactory<R6Ranking.Data.R6EsportsDbContext> DbFactory
@inject NavigationManager NavManager
@rendermode InteractiveServer

<div class="container">
    <div class="grid">
        <span></span>

        <div class="grid-item b3x1" Style="background-color: transparent;"> <br /> </div>

        <!-- Header -->
        <div class="grid-item b1x1">
            <MudButton EndIcon="@Icons.Material.Filled.ArrowBack"
                       Color="Color.Primary"
                       OnClick="NavigateToLowerEloTeam">
            </MudButton>
        </div>
        <div class="grid-item b8x1" style="border: 5px; border-color: var(--bs-gold---1);">
            <MudItem xs="10" Style="display: flex; align-items: center; text-align: left;">
                <div Style="flex: 1; display: flex; min-width: 150px; max-width: 200px; justify-content: flex-start; align-items: center;">
                    <MudImage Src="@team?.LogoUrl" Alt="Team Logo"
                              Style="width: 100%; max-width: 150px; height: auto;"  />
                </div>
                <div Style="flex: 2; min-width: 200px; display: flex; flex-direction: column; justify-content: center;">
                    <MudText Typo="Typo.h2" Style="font-size: 2.8rem; font-weight: bold; color: var(--bs-white--1); margin-bottom: 8px; white-space: nowrap;">
                        @team?.TeamName
                    </MudText>
                    <MudText Typo="Typo.h4" Style="padding-left: 5px; color: var(--bs-gold---1); font-size: 1.7rem; margin-bottom: 4px; margin-left: 16px; white-space: nowrap;">
                        @team?.CurrentElo RP
                    </MudText>
                </div>
            </MudItem>
        </div>
        <div class="grid-item b1x1">
            <MudButton EndIcon="@Icons.Material.Filled.ArrowForward"
                       Color="Color.Primary"
                       OnClick="NavigateToHigherEloTeam">
            </MudButton>
        </div>

        <div class="grid-item b3x1" Style="background-color: transparent;"> <br /> </div>

        <!-- Elo History Section -->
        <div class="grid-item b18x3">    
            <h2 style="font-size: 1.8rem; margin: 24px 0 16px;">Elo History</h2>
            <MudContainer Style="margin-bottom: 32px;">
                <MudChart ChartType="ChartType.Line" ChartSeries="@Series" @bind-SelectedIndex="Index"
                          XAxisLabels="@XAxisLabels" Width="100%" Height="400px" ChartOptions="@Options" ShowPoints="true" />
            </MudContainer>
        </div>

        <!-- Roster Section -->
        <div class="grid-item b18x3">
            <div class="cards-container">
                @if (Players != null)
                {
                    @foreach (var player in Players)
                    {
                        <PlayerCard Player="@player" />
                    }
                }
                else
                {
                    <p>No Players available.</p>
                }
            </div>
        </div>

        <!-- Match History Section -->
        <div class="grid-item b18x3">
            <h2 style="font-size: 1.8rem; margin: 24px 0 16px;">Match History</h2>
            <MudTable Items="@Matches" Hover="true" Striped="true" Dense="true">
        
            </MudTable>
        </div>

    </div>
</div>

@code {
    private Team? team;
    public ChartOptions Options = new ChartOptions() { LineStrokeWidth = 2 };
    public List<ChartSeries> Series = new();
    public string[] XAxisLabels = Array.Empty<string>();
    private int Index = -1;
    private List<Player>? Players;
     private List<Match> Matches = new();

    [Parameter] public string teamName { get; set; } = default!;

    protected override async Task OnInitializedAsync()
    {
        var context = await DbFactory.CreateDbContextAsync();
        team = await context.Teams.Include(t => t.Players).FirstOrDefaultAsync(t => t.TeamName == teamName);
        if (team != null)
        {
            var eloHistory = await context.TeamEloChanges.Where(e => e.TeamID == team.TeamID).OrderBy(e => e.Date).ToListAsync();
            PopulateChartData(eloHistory);

            Players = await context
            .Players.Where(e => e.TeamID == team.TeamID)
            .Include(p => p.OriginCountry)
            .ToListAsync();

            Matches = await context.Matches
                .Where(m => m.Team1ID == team.TeamID || m.Team2ID == team.TeamID)
                .OrderByDescending(m => m.MatchDate)
                .ToListAsync();
        }
    }

    private void PopulateChartData(List<TeamEloChange> eloHistory)
    {
        XAxisLabels = eloHistory.Select(e => e.Date.ToShortDateString()).ToArray();
        Series = new List<ChartSeries> {
            new ChartSeries {
                Name = "Elo Rating",
                Data = eloHistory.Select(e => (double)e.CurrentElo).ToArray(),
            }
        };
    }

    private async Task NavigateToLowerEloTeam()
    {
        var context = await DbFactory.CreateDbContextAsync();
        var lowerTeam = await context.Teams.Where(t => t.CurrentElo < team!.CurrentElo)
                                           .OrderByDescending(t => t.CurrentElo)
                                           .FirstOrDefaultAsync();

        NavManager.NavigateTo($"/teams/{lowerTeam?.TeamName}");
    }

    private async Task NavigateToHigherEloTeam()
    {
        var context = await DbFactory.CreateDbContextAsync();
        var higherTeam = await context.Teams.Where(t => t.CurrentElo > team!.CurrentElo)
                                            .OrderBy(t => t.CurrentElo)
                                            .FirstOrDefaultAsync();

        NavManager.NavigateTo($"/teams/{higherTeam?.TeamName}");
    }

    private bool HasPlayers() {
        if(Players != null){
            return false;
        }
        return true;
    }

}
