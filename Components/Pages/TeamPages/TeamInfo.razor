@page "/teams/{teamName}"

@using R6Ranking.Models
@using Microsoft.EntityFrameworkCore
@using R6Ranking.Data
@using R6Ranking.Components.Splashable
@inject IDbContextFactory<R6Ranking.Data.R6EsportsDbContext> DbFactory
@inject NavigationManager NavManager
@rendermode InteractiveServer

<div style="background: rgba(0, 0, 0, 0.3); backdrop-filter: blur(5px); padding: 16px; color: white; border-radius: 8px">
    
    <!-- Header Section -->
    <MudContainer Style="display: flex; justify-content: space-between; align-items: center; margin-bottom: 32px;">

        <MudButton EndIcon="@Icons.Material.Filled.ArrowBack"
            Color="Color.Primary"
            OnClick="NavigateToLowerEloTeam">
        </MudButton>

        <MudItem xs="10" Style="text-align: center;">
            <MudImage Src="@team?.LogoUrl" Alt="Team Logo" 
                      Style="width: 100px; height: auto; display: block; margin: 0 auto;" />
            <MudText Typo="Typo.h2" Style="font-size: 2.5rem; font-weight: bold;">@team?.TeamName</MudText>
            <MudText Typo="Typo.h5" Style="color: #007BFF;">@team?.CurrentElo RP</MudText>
            <MudText Typo="Typo.caption" Style="color: #6c757d;">No. 1 Internationally for the past X days</MudText>
        </MudItem>

        <MudButton
            EndIcon="@Icons.Material.Filled.ArrowForward"
            Color="Color.Primary" 
            OnClick="NavigateToHigherEloTeam">
        </MudButton>
    </MudContainer>

    <!-- Elo History Section -->
    <h2 style="font-size: 1.8rem; margin: 24px 0 16px;">Elo History</h2>
    <MudContainer Style="margin-bottom: 32px;">
        <MudChart ChartType="ChartType.Line" ChartSeries="@Series" @bind-SelectedIndex="Index"
                  XAxisLabels="@XAxisLabels" Width="100%" Height="400px" ChartOptions="@Options" ShowPoints="true" />
    </MudContainer>

    <!-- Roster Section -->
    <h2 style="font-size: 1.8rem; margin: 24px 0 16px;">Team Roster</h2>
    <MudContainer Style="display: flex; flex-wrap: wrap; gap: 16px; margin-bottom: 32px;">
        @if (Players == null)
        {
            <p>Loading...</p>
        }
        else if (!Players.Any())
        {
            <p>No players found.</p>
        }
        else
        {
            @foreach (var player in Players)
            {
                <PlayerCard Player="@player" />
            }
        }x
    </MudContainer>
    <!-- Match History Section -->
    <h2 style="font-size: 1.8rem; margin: 24px 0 16px;">Match History</h2>
    <MudTable Items="@Matches" Hover="true" Striped="true" Dense="true">
        
    </MudTable>
</div>

@code {
    private Team? team;
    public ChartOptions Options = new ChartOptions() { LineStrokeWidth = 2 };
    public List<ChartSeries> Series = new();
    public string[] XAxisLabels = Array.Empty<string>();
    private int Index = -1;
    private List<Player>? Players;
     private List<Match> Matches = new();

    [Parameter] public string teamName { get; set; } = default!;

    protected override async Task OnInitializedAsync()
    {
        var context = await DbFactory.CreateDbContextAsync();
        team = await context.Teams.Include(t => t.Players).FirstOrDefaultAsync(t => t.TeamName == teamName);
        if (team != null)
        {
            var eloHistory = await context.TeamEloChanges.Where(e => e.TeamID == team.TeamID).OrderBy(e => e.Date).ToListAsync();
            PopulateChartData(eloHistory);

            Players = await context
            .Players.Where(e => e.TeamID == team.TeamID)
            .Include(p => p.OriginCountry)
            .ToListAsync();

            Matches = await context.Matches
                .Where(m => m.Team1ID == team.TeamID || m.Team2ID == team.TeamID)
                .OrderByDescending(m => m.MatchDate)
                .ToListAsync();
        }
    }

    private void PopulateChartData(List<TeamEloChange> eloHistory)
    {
        XAxisLabels = eloHistory.Select(e => e.Date.ToShortDateString()).ToArray();
        Series = new List<ChartSeries> {
            new ChartSeries {
                Name = "Elo Rating",
                Data = eloHistory.Select(e => (double)e.CurrentElo).ToArray(),
            }
        };
    }

    private async Task NavigateToLowerEloTeam()
    {
        var context = await DbFactory.CreateDbContextAsync();
        var lowerTeam = await context.Teams.Where(t => t.CurrentElo < team!.CurrentElo)
                                           .OrderByDescending(t => t.CurrentElo)
                                           .FirstOrDefaultAsync();

        NavManager.NavigateTo($"/teams/{lowerTeam?.TeamName}");
    }

    private async Task NavigateToHigherEloTeam()
    {
        var context = await DbFactory.CreateDbContextAsync();
        var higherTeam = await context.Teams.Where(t => t.CurrentElo > team!.CurrentElo)
                                            .OrderBy(t => t.CurrentElo)
                                            .FirstOrDefaultAsync();

        NavManager.NavigateTo($"/teams/{higherTeam?.TeamName}");
    }

    private bool HasPlayers() {
        if(Players != null){
            return false;
        }
        return true;
    }

}
