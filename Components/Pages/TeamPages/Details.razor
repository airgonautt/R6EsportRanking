@page "/teams/details"

@using Microsoft.EntityFrameworkCore
@using R6Ranking.Models
@inject IDbContextFactory<R6Ranking.Data.R6EsportsDbContext> DbFactory
@inject NavigationManager NavigationManager

<PageTitle>Details</PageTitle>

<h1>Details</h1>

<div>
    <h4>Team</h4>
    <hr />
    @if (team is null)
    {
        <p><em>Loading...</em></p>
    }
    else {
        <dl class="row">
            <dt class="col-sm-2">TeamName</dt>
            <dd class="col-sm-10">@team.TeamName</dd>
            <dt class="col-sm-2">RegionID</dt>
            <dd class="col-sm-10">@team.RegionID</dd>
            <dt class="col-sm-2">RegionName</dt>
            <dd class="col-sm-10">@team.RegionName</dd>
            <dt class="col-sm-2">Coach</dt>
            <dd class="col-sm-10">@team.Coach</dd>
            <dt class="col-sm-2">CurrentElo</dt>
            <dd class="col-sm-10">@team.CurrentElo</dd>
            <dt class="col-sm-2">CreatedAt</dt>
            <dd class="col-sm-10">@team.CreatedAt</dd>
            <dt class="col-sm-2">UpdatedAt</dt>
            <dd class="col-sm-10">@team.UpdatedAt</dd>
        </dl>
        <div>
            <a href="@($"/teams/edit?teamid={team.TeamID}")">Edit</a> |
            <a href="@($"/teams")">Back to List</a>
        </div>
    }
</div>

@code {
    Team? team;

    [SupplyParameterFromQuery]
    public int TeamID { get; set; }

    protected override async Task OnInitializedAsync()
    {
        using var context = DbFactory.CreateDbContext();
        team = await context.Teams.FirstOrDefaultAsync(m => m.TeamID == TeamID);

        if (team is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }
}
