@page "/Teams/edit"

@using Microsoft.EntityFrameworkCore
@using R6Ranking.Models
@inject IDbContextFactory<R6Ranking.Data.R6EsportsDbContext> DbFactory
@inject NavigationManager NavigationManager

<PageTitle>Edit</PageTitle>

<h1>Edit</h1>

<h4>Team</h4>
<hr />
@if (Team is null)
{
    <p><em>Loading...</em></p>
}
else
{
    <div class="row">
        <div class="col-md-4">
            <EditForm method="post" Model="Team" OnValidSubmit="UpdateTeam" FormName="edit" Enhance>
                <DataAnnotationsValidator />
                <ValidationSummary />
                <input type="hidden" name="Team.TeamID" value="@Team.TeamID" />
                <div class="mb-3">
                    <label for="teamname" class="form-label">TeamName:</label>
                    <InputText id="teamname" @bind-Value="Team.TeamName" class="form-control" />
                    <ValidationMessage For="() => Team.TeamName" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="logourl" class="form-label">LogoUrl:</label>
                    <InputText id="logourl" @bind-Value="Team.LogoUrl" class="form-control" />
                    <ValidationMessage For="() => Team.LogoUrl" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="regionid" class="form-label">RegionID:</label>
                    <InputText id="regionid" @bind-Value="Team.RegionID" class="form-control" />
                    <ValidationMessage For="() => Team.RegionID" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="currentelo" class="form-label">CurrentElo:</label>
                    <InputNumber id="currentelo" @bind-Value="Team.CurrentElo" class="form-control" />
                    <ValidationMessage For="() => Team.CurrentElo" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="createdat" class="form-label">CreatedAt:</label>
                    <InputDate id="createdat" @bind-Value="Team.CreatedAt" class="form-control" />
                    <ValidationMessage For="() => Team.CreatedAt" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="updatedat" class="form-label">UpdatedAt:</label>
                    <InputDate id="updatedat" @bind-Value="Team.UpdatedAt" class="form-control" />
                    <ValidationMessage For="() => Team.UpdatedAt" class="text-danger" />
                </div>
                <button type="submit" class="btn btn-primary">Save</button>
            </EditForm>
        </div>
    </div>
}

<div>
    <a href="/teams">Back to List</a>
</div>

@code {
    [SupplyParameterFromQuery]
    public int TeamID { get; set; }

    [SupplyParameterFromForm]
    public Team? Team { get; set; }

    protected override async Task OnInitializedAsync()
    {
        using var context = DbFactory.CreateDbContext();
        Team ??= await context.Teams.FirstOrDefaultAsync(m => m.TeamID == TeamID);

        if (Team is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }

    // To protect from overposting attacks, enable the specific properties you want to bind to.
    // For more details, see https://aka.ms/RazorPagesCRUD.
    public async Task UpdateTeam()
    {
        using var context = DbFactory.CreateDbContext();
        context.Attach(Team!).State = EntityState.Modified;

        try
        {
            await context.SaveChangesAsync();
        }
        catch (DbUpdateConcurrencyException)
        {
            if (!TeamExists(Team!.TeamID))
            {
                NavigationManager.NavigateTo("notfound");
            }
            else
            {
                throw;
            }
        }

        NavigationManager.NavigateTo("/teams");
    }

    bool TeamExists(int teamid)
    {
        using var context = DbFactory.CreateDbContext();
        return context.Teams.Any(e => e.TeamID == teamid);
    }
}
