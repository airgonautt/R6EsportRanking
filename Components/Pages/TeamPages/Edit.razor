@page "/Teams/edit"

@using Microsoft.EntityFrameworkCore
@using R6Ranking.Models
@inject IDbContextFactory<R6Ranking.Data.R6EsportsDbContext> DbFactory
@inject NavigationManager NavigationManager

<PageTitle>Edit Team</PageTitle>

<h1>Edit Team</h1>

@if (Team == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <div class="row">
        <div class="col-md-4">
            <EditForm Model="Team" OnValidSubmit="UpdateTeam">
                <DataAnnotationsValidator />
                <ValidationSummary />

                <div class="mb-3">
                    <label for="teamname" class="form-label">Team Name:</label>
                    <InputText id="teamname" @bind-Value="Team.TeamName" class="form-control" />
                    <ValidationMessage For="() => Team.TeamName" class="text-danger" />
                </div>

                <div class="mb-3">
                    <label for="logourl" class="form-label">Logo URL:</label>
                    <InputText id="logourl" @bind-Value="Team.LogoUrl" class="form-control" />
                    <ValidationMessage For="() => Team.LogoUrl" class="text-danger" />
                </div>

                <div class="mb-3">
                    <label for="regionid" class="form-label">Region:</label>
                    <InputText id="regionid" @bind-Value="Team.RegionID" class="form-control" />
                    <ValidationMessage For="() => Team.RegionID" class="text-danger" />
                </div>

                <div class="mb-3">
                    <label for="currentelo" class="form-label">Current Elo:</label>
                    <InputNumber id="currentelo" @bind-Value="Team.CurrentElo" class="form-control" />
                    <ValidationMessage For="() => Team.CurrentElo" class="text-danger" />
                </div>

                <div class="mb-3">
                    <h3>Assigned Tournaments</h3>
                    <ul class="list-group">
                        @foreach (var tournament in TeamTournaments)
                        {
                            <li class="list-group-item d-flex justify-content-between align-items-center">
                                @tournament.TournamentName
                                <button class="btn btn-danger btn-sm" @onclick="() => RemoveTournament(tournament.TournamentID)">Remove</button>
                            </li>
                        }
                    </ul>
                </div>

                <button type="submit" class="btn btn-primary">Save</button>
            </EditForm>

            <div class="mb-3 mt-4">
                <h3>Available Tournaments</h3>
                <ul class="list-group">
                    @foreach (var tournament in AllTournaments)
                    {
                        <li class="list-group-item d-flex justify-content-between align-items-center">
                            @tournament.TournamentName
                            <button class="btn btn-success btn-sm" @onclick="() => AddTournament(tournament.TournamentID)">Add</button>
                        </li>
                    }
                </ul>
            </div>
        </div>
    </div>
}

<div>
    <a href="/teams">Back to List</a>
</div>

@code {
    [SupplyParameterFromQuery]
    public int TeamID { get; set; }

    public Team? Team { get; set; }
    private List<Tournament> AllTournaments { get; set; } = new();
    private List<Tournament> TeamTournaments { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {
        using var context = DbFactory.CreateDbContext();

        // Load team details
        Team = await context.Teams
            .Include(t => t.Tournaments)
            .FirstOrDefaultAsync(t => t.TeamID == TeamID);

        if (Team == null)
        {
            NavigationManager.NavigateTo("notfound");
            return;
        }

        // Load tournaments associated with the team
        TeamTournaments = Team.Tournaments.ToList();

        // Load all tournaments
        AllTournaments = await context.Tournaments.ToListAsync();
    }

    private async Task AddTournament(int tournamentId)
    {
        using var context = DbFactory.CreateDbContext();
        var tournament = await context.Tournaments.FirstOrDefaultAsync(t => t.TournamentID == tournamentId);

        if (tournament != null && !TeamTournaments.Contains(tournament))
        {
            TeamTournaments.Add(tournament);
        }
    }

    private async Task RemoveTournament(int tournamentId)
    {
        var tournamentToRemove = TeamTournaments.FirstOrDefault(t => t.TournamentID == tournamentId);

        if (tournamentToRemove != null)
        {
            TeamTournaments.Remove(tournamentToRemove);
        }
    }

    public async Task UpdateTeam()
    {
        using var context = DbFactory.CreateDbContext();

        // Reattach and update tournaments
        var existingTeam = await context.Teams
            .Include(t => t.Tournaments)
            .FirstOrDefaultAsync(t => t.TeamID == TeamID);

        if (existingTeam != null)
        {
            // Update simple fields
            existingTeam.TeamName = Team!.TeamName;
            existingTeam.LogoUrl = Team.LogoUrl;
            existingTeam.RegionID = Team.RegionID;
            existingTeam.CurrentElo = Team.CurrentElo;

            // Update relationships
            existingTeam.Tournaments.Clear();
            foreach (var tournament in TeamTournaments)
            {
                existingTeam.Tournaments.Add(await context.Tournaments.FindAsync(tournament.TournamentID)!);
            }

            await context.SaveChangesAsync();
        }

        NavigationManager.NavigateTo("/teams");
    }
}
