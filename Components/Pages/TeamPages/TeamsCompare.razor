@page "/teams/compare"

@using R6Ranking.Models
@using Microsoft.EntityFrameworkCore
@using R6Ranking.Data
@using R6Ranking.Components.Splashable
@inject IDbContextFactory<R6Ranking.Data.R6EsportsDbContext> DbFactory
@inject NavigationManager NavManager

<div style="padding: 16px; color: white; background: rgba(0, 0, 0, 0.3); backdrop-filter: blur(5px); border-radius: 8px;">

    <h1 style="text-align: center; margin-bottom: 24px;">Compare Teams</h1>

 
    <div>
        @for (int i = 0; i < TeamSearches.Count; i++)
        {
            <div style="margin-bottom: 16px;">
                <InputText id=@($"teamname-{i}") @bind-Value="TeamSearches[i]" class="form-control" />
                @if (string.IsNullOrWhiteSpace(TeamSearches[i]))
                {
                    <div class="text-danger">Please enter a valid team name.</div>
                }
            </div>
        }

        @if (TeamSearches.Count < MaxTeams)
        {
            <MudButton Color="Color.Primary" Variant="Variant.Filled" OnClick="AddSearchBar">
                + Add Team
            </MudButton>
        }

        <MudButton Color="Color.Secondary" Variant="Variant.Filled" OnClick="FetchTeams">
            Retrieve Teams
        </MudButton>
    </div>

    <!-- Elo Graph -->
    <div style="margin-top: 32px;">
        <h2>Elo Graph</h2>
        <MudChart ChartType="ChartType.Line" ChartSeries="@Series" XAxisLabels="@XAxisLabels"
                  Width="100%" Height="400px" ChartOptions="@Options" ShowPoints="true" />
    </div>

    @if (SelectedTeams.Count == 2)
    {
        <!-- Team Comparison Details -->
        <div style="margin-top: 32px; display: flex; justify-content: space-between;">
            <!-- Left Team Info -->
            <div style="width: 45%; background: rgba(255, 255, 255, 0.1); padding: 16px; border-radius: 8px;">
                <h3>@SelectedTeams[0]?.TeamName</h3>
                <p>Roster:</p>
                <ul>
                    @foreach (var player in SelectedTeams[0]?.Players ?? new List<Player>())
                    {
                        <li>@player.Name</li>
                    }
                </ul>
                <p>Achievements:</p>
                <ul>
                    
                </ul>
            </div>

            <!-- Right Team Info -->
            <div style="width: 45%; background: rgba(255, 255, 255, 0.1); padding: 16px; border-radius: 8px;">
                <h3>@SelectedTeams[1]?.TeamName</h3>
                <p>Roster:</p>
                <ul>
                    @foreach (var player in SelectedTeams[1]?.Players ?? new List<Player>())
                    {
                        <li>@player.Name</li>
                    }
                </ul>
                <p>Achievements:</p>
                <ul>
                    
                </ul>
            </div>
        </div>

        <!-- Match History -->
        <div style="margin-top: 32px;">
            <h3>Head-to-Head Matches</h3>
            <MudTable Items="@Matches" Hover="true" Striped="true" Dense="true">
                
            </MudTable>
        </div>
    }
</div>

@code {
    private const int MaxTeams = 5; // Maximum number of teams to compare
    private List<string> TeamSearches = new List<string> { "" }; // Initial search bar with an empty value
    private List<Team> SelectedTeams = new(); // Stores fetched team data
    private List<Match> Matches = new(); // Stores match data for comparison
    public ChartOptions Options = new ChartOptions { LineStrokeWidth = 2 };
    public List<ChartSeries> Series = new();
    public string[] XAxisLabels = Array.Empty<string>();

    private async Task AddSearchBar()
    {
        if (TeamSearches.Count < MaxTeams)
        {
            TeamSearches.Add("");
        }
    }

    private async Task FetchTeams()
    {
        // Filter out empty or invalid search bars
        var validSearches = TeamSearches.Where(search => !string.IsNullOrWhiteSpace(search)).ToList();

        if (!validSearches.Any())
        {
            // Show a message or handle no valid inputs appropriately
            Console.WriteLine("No valid team names entered.");
            return;
        }

        var context = await DbFactory.CreateDbContextAsync();
        var teams = await Task.WhenAll(validSearches.Select(async search =>
            await context.Teams.Include(t => t.Players)
                               .FirstOrDefaultAsync(t => t.TeamName == search)));

        // Filter null results and populate SelectedTeams
        SelectedTeams = teams.Where(t => t != null).ToList();

        // Populate Elo history data for chart
        if (SelectedTeams.Count > 0)
        {
            var teamIds = SelectedTeams.Select(t => t!.TeamID).ToList();
            var eloHistory = await context.TeamEloChanges
                .Where(e => teamIds.Contains(e.TeamID))
                .OrderBy(e => e.Date)
                .ToListAsync();

            PopulateChartData(eloHistory);
        }

        // If exactly two teams are selected, fetch head-to-head match data
        if (SelectedTeams.Count == 2)
        {
            var teamIds = SelectedTeams.Select(t => t!.TeamID).ToList();
            Matches = await context.Matches
                .Where(m => teamIds.Contains(m.Team1ID) && teamIds.Contains(m.Team2ID))
                .OrderByDescending(m => m.MatchDate)
                .ToListAsync();
        }
    }

    private void PopulateChartData(List<TeamEloChange> eloHistory)
    {
        XAxisLabels = eloHistory.Select(e => e.Date.ToShortDateString()).ToArray();
        Series = SelectedTeams
            .Where(team => team != null)
            .Select(team => new ChartSeries
                {
                    Name = team.TeamName,
                    Data = eloHistory.Where(e => e.TeamID == team.TeamID)
                                     .Select(e => (double)e.CurrentElo)
                                     .ToArray()
                }).ToList();
    }
}