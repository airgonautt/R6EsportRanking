@page "/players"

@using Microsoft.EntityFrameworkCore
@using R6Ranking.Models
@using R6Ranking.Data
@inject IDbContextFactory<R6Ranking.Data.R6EsportsDbContext> DbFactory
@implements IAsyncDisposable

<PageTitle>Players</PageTitle>

<h1>Players</h1>

<p>
    <a href="players/create">Create New</a>
</p>

<!-- Flex container for players -->
<div class="cards-container">
    @if (players != null) {
        @foreach (var player in players) {
            <div class="player-card">
                <!-- Portrait Section: Background and Foreground -->
                <div class="player-portrait" style="background-image: url('@player.CardURL')">
                    <img class="player-photo" src="@player.PhotoURL" alt="@player.PlayerName" />
                </div>

                <!-- Player Information -->
                <div class="player-info">
                    <h3>@player.PlayerName</h3>
                    <p>Role: @player.Role</p>
                    <p>Joined: @player.DateJoined?.ToShortDateString()</p>
                    <p>Team ID: @player.TeamID</p>
                    @if (player.DateLeft.HasValue) {
                        <p>Left: @player.DateLeft.Value.ToShortDateString()</p>
                    }
                </div>

                <!-- Player Actions -->
                <div class="player-actions">
                    <a href="@($"players/edit?playerid={player.PlayerID}")">Edit</a> |
                    <a href="@($"players/details?playerid={player.PlayerID}")">Details</a> |
                    <a href="@($"players/delete?playerid={player.PlayerID}")">Delete</a>
                </div>
            </div>
        }
    }

    else {
        <p>Loading players...</p>
    }
</div>

@code {
    private List<Player> players = new List<Player>();

    private R6EsportsDbContext context = default!;
    
    protected override async Task OnInitializedAsync() {

        context = DbFactory.CreateDbContext();

        players = await context.Players.ToListAsync();

    }

    public async ValueTask DisposeAsync() {

        if (context != null) {

            await context.DisposeAsync();

        }

    }
}
