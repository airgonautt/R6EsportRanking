@page "/players/delete"
@attribute [Authorize(Policy = UserPolicy.DELETE)]

@using Microsoft.AspNetCore.Authorization
@using Microsoft.EntityFrameworkCore
@using R6Ranking.Models
@inject IDbContextFactory<R6Ranking.Data.R6EsportsDbContext> DbFactory
@inject NavigationManager NavigationManager


<PageTitle>Delete</PageTitle>

<h1>Delete</h1>

<h3>Are you sure you want to delete this?</h3>
<div>
    <h4>Player</h4>
    <hr />
    @if (player is null)
    {
        <p><em>Loading...</em></p>
    }
    else {
        <dl class="row">
            <dt class="col-sm-2">PlayerName</dt>
            <dd class="col-sm-10">@player.PlayerName</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">Role</dt>
            <dd class="col-sm-10">@player.Role</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">PhotoURL</dt>
            <dd class="col-sm-10">@player.PhotoURL</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">TeamID</dt>
            <dd class="col-sm-10">@player.TeamID</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">DateJoined</dt>
            <dd class="col-sm-10">@player.DateJoined</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">DateLeft</dt>
            <dd class="col-sm-10">@player.DateLeft</dd>
        </dl>
        <EditForm method="post" Model="player" OnValidSubmit="DeletePlayer" FormName="delete" Enhance>
            <button type="submit" class="btn btn-danger" disabled="@(player is null)">Delete</button> |
            <a href="/players">Back to List</a>
        </EditForm>
    }
</div>

@code {
    Player? player;

    [SupplyParameterFromQuery]
    public int PlayerID { get; set; }

    protected override async Task OnInitializedAsync()
    {
        using var context = DbFactory.CreateDbContext();
        player = await context.Players.FirstOrDefaultAsync(m => m.PlayerID == PlayerID);

        if (player is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }

    public async Task DeletePlayer()
    {
        using var context = DbFactory.CreateDbContext();
        context.Players.Remove(player!);
        await context.SaveChangesAsync();
        NavigationManager.NavigateTo("/players");
    }
}
