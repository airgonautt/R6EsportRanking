@using R6Ranking.Models
@using Microsoft.EntityFrameworkCore
@inject IDbContextFactory<R6Ranking.Data.R6EsportsDbContext> DbFactory

<div class="table-responsive">
    <Grid TItem="TeamEloChange"
          Class="table table-hover table-bordered table-striped custom-grid"
          DataProvider="TeamEloChangesDataProvider"
          AllowFiltering="false"
          AllowPaging="true"
          AllowSorting="true"
          Responsive="true"
          PagerClass="custom-pager">

        <GridColumn TItem="TeamEloChange" HeaderText="Note" PropertyName="Note" SortString="Note" SortKeySelector="item => item.Note" FilterTextboxWidth="200">
            @context.Note
        </GridColumn>
        <GridColumn TItem="TeamEloChange" HeaderText="Current Elo" PropertyName="CurrentElo" SortString="CurrentElo" SortKeySelector="item => item.CurrentElo" FilterTextboxWidth="100">
            @context.CurrentElo
        </GridColumn>
        <GridColumn TItem="TeamEloChange" HeaderText="Elo Change" PropertyName="EloChange" SortString="EloChange" SortKeySelector="item => item.EloChange" FilterTextboxWidth="100">
            @context.EloChange
        </GridColumn>
        <GridColumn TItem="TeamEloChange" HeaderText="Date" PropertyName="Date" SortString="Date" SortKeySelector="item => item.Date" FilterTextboxWidth="120">
            @context.Date.ToString("yyyy-MM-dd")
        </GridColumn>

    </Grid>
</div>


@code {
    [Parameter] public Team? Team { get; set; }
    [Parameter] public string PrimaryColor { get; set; } = "#fbac40"; // gold default
    private List<TeamEloChange> EloHistory = new();

    protected override async Task OnParametersSetAsync()
    {
        if (Team != null)
        {
            var context = await DbFactory.CreateDbContextAsync();
            EloHistory = await context.TeamEloChanges
                .Where(e => e.TeamID == Team.TeamID)
                .OrderByDescending(e => e.Date)
                .ToListAsync();
        }
    }

    private async Task<GridDataProviderResult<TeamEloChange>> TeamEloChangesDataProvider(GridDataProviderRequest<TeamEloChange> request)
    {
        var query = EloHistory.AsQueryable();

        if (request.Sorting is not null && request.Sorting.Any())
        {
            var sort = request.Sorting.First();
            query = sort.SortDirection == SortDirection.Ascending
                ? query.OrderBy(sort.SortKeySelector)
                : query.OrderByDescending(sort.SortKeySelector);
        }
        else
        {
            query = query.OrderByDescending(item => item.Date); // Default sorting
        }

        // Apply paging
        var totalCount = query.Count();
        var data = query.Skip((request.PageNumber - 1) * request.PageSize).Take(request.PageSize).ToList();

        return await Task.FromResult(new GridDataProviderResult<TeamEloChange>
            {
                Data = data,
                TotalCount = totalCount
            });
    }
}

<style>
    .table-responsive {
        overflow-x: auto;
        -webkit-overflow-scrolling: touch;
    }

    .custom-grid {
        color: var(--bs-white--1);
        background-color: var(--bs-gray--1);
        table-layout: fixed;
        width: 100%;
    }

    .custom-grid th, .custom-grid td {
        text-align: center;
        overflow: hidden;
        text-overflow: ellipsis;
        white-space: nowrap;
    }

    .custom-grid th {
        background-color: var(--primary-color);
        color: var(--bs-white);
    }

    .custom-grid td {
        color: var(--bs-white--1);
        background-color: var(--bs-gray--1);
        padding: 10px;
    }

    .custom-grid tr {
        background-color: var(--bs-gray--1);
    }

    .custom-grid tr:hover {
        background-color: var(--primary-color);
        color: var(--bs-white);
    }

    .custom-pager .page-item .page-link {
        background-color: var(--primary-color);
        color: var(--bs-white);
        border: 1px solid var(--primary-color);
    }

    .custom-pager .page-item.active .page-link {
        background-color: var(--primary-color);
        color: var(--bs-black);
        border-color: var(--primary-color);
    }

    .custom-pager .page-item .page-link:hover {
        background-color: var(--bs-black);
        color: var(--primary-color);
    }

    :root {
        --primary-color: @PrimaryColor;
    }

    .pagination{
        --bs-pagination-color: var(--bs-white--2);
        --bs-pagination-border-color: var(--bs-white--2);
        --bs-pagination-hover-color: var(--bs-white--1);
        --bs-pagination-hover-bg: var(--primary-color);
        --bs-pagination-hover-border-color: var(--primary-color);
        --bs-pagination-focus-color: var(--bs-white--2);
        --bs-pagination-focus-bg: var(--primary-color1);
        --bs-pagination-focus-box-shadow: 0 0 0 0.25rem rgba(13, 110, 253, 0.25);
        --bs-pagination-active-color: var(--bs-white--2);
        --bs-pagination-active-bg: var(--primary-color);
        --bs-pagination-active-border-color: var(--primary-color);
    }
    .body{
        color: var(--bs-white--2);
    }
</style>